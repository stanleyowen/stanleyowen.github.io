"use strict";var version="v1::",offlineFundamentals=["/"];self.addEventListener("install",(function(event){event.waitUntil(caches.open(version+"fundamentals").then((function(cache){return cache.addAll(offlineFundamentals)})).then((function(){console.log("Service Worker: Installation Completed")})))})),self.addEventListener("fetch",(function(event){"GET"===event.request.method?event.respondWith(caches.match(event.request).then((function(cached){var networked=fetch(event.request).then(fetchedFromNetwork,unableToResolve).catch(unableToResolve);return console.log("Service Worker: Fetch Event",cached?"(Cached)":"(Network)",event.request.url),cached||networked;function fetchedFromNetwork(response){var cacheCopy=response.clone();return console.log("Service Worker: Fetch Response From Network",event.request.url),caches.open(version+"pages").then((function add(cache){return cache.put(event.request,cacheCopy)})).then((function(){console.log("Service Worker: Fetch Response Stored in Cache.",event.request.url)})),response}function unableToResolve(){return console.error("Service Worker: Fetch Request Failed in both Cache and Network"),new Response("<h1>Service Unavailable</h1>",{status:503,statusText:"Service Unavailable",headers:new Headers({"Content-Type":"text/html"})})}}))):console.error("Service Worker: Fetch Event Ignored",event.request.method,event.request.url)})),self.addEventListener("activate",(function(event){event.waitUntil(caches.keys().then((function(keys){return Promise.all(keys.filter((function(key){return!key.startsWith(version)})).map((function(key){return caches.delete(key)})))})).then((function(){console.log("Service Worker: Activation Completed")})))}));